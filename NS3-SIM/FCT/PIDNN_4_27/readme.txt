4月27日对整个代码结构进行调整
之前根据终端节点数量定义相应大小空间储存信息，现更改内置文件 rdma-queue-pair.h中CC内容结构体，有以下改进：
	避免之前偶尔出现的虚拟机内存不够，卡死重启或SIGKILL终止终端运行的情况。
	减少了一些隐藏bug,之前变量的储存区别于不同节点，调整之后是不同流，加入tim字段，每次初始化为0，则可以根据tim字段判断是否为新流还是旧流，以此触发一些内容的初始化，避免重复使用上一个流的数据。同时也避免了一个节点同时发送多个流，但是CC没有区分流，造成数据交叉影响。	



对算法四路进行调整(发送速率限制1-100Gbps)：
	之前RTTch，启动速度为10Gbps,RTT初始值为5us，后根据统计的RTT值进行调整（avg\min等）
	后修改启动速度为1Gbps(最小发送速率)，为了探测到传播时延，设置前4\8个节点为探测阶段，设置目标RTT为最小RTT*0.9(速率以最小启动，0.9的系数只是尽量保证在探测阶段速率保持最低)，后控制阶段（默认探测阶段以及探测到传播RTT），设置目标RTT为min_RTT*1.25(认为“合适的”目标RTT应该在传播RTT的1.25倍左右，较低不能够充分利用带宽，较高拥塞严重)
	以修改后的算法结果：PIDNN_RTTchX0.9_1Gbps.txt;流较小时效果很好，较大时FCT slowdown增长很快。我认为是带宽利用不充分导致的。
	后续改进思路有：优化PIDNN权值参数、训练预测网络提高精度、修改0.9\1.25*参数

对于算法优化的考虑：
	通过观察各个节点的流发送速率及预测结果发现，PIDNN对于速率控制效果可以进一步的提升，而预测神经网络之前是根据未训练的PIDNN所导出数据进行训练。
	先将预测模块去掉，优化PIDNN参数，优化完之后导出数据训练预测神经网络，后联合部署

	之前PIDNN参数是在，e = rtt-rtttarget下修正的，对于不同rtttarget效果不同。而后设置e = (rtt-rtttarget)/rtttarget,因此参数需要更新，之前的参数优化方法较差，需要重新考虑优化方式。
	针对三种参数分别设计不同的控制指标
	PIDNN参数优化，每N个报文开始修改一次参数，并统计一组指标，根据本次统计指标和上一次指标进行比较，若变好，给予奖励，否则给予惩罚
	P参数指标：
	I参数指标：
	D参数指标：
